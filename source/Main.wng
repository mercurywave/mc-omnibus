global enum eNext
    Forwards; Backwards; Done; Menu

global ::Main(=> async)
    
    await $Menu.Run($Menu.DoMain)
    //await $RunCampaign($Campaign.GetAllCampaigns()[0])


global ::RunCampaign(campaign, ?key => async)
    key ?: $Storage.GetNewSaveKey()
    $IO.Log("RunCampaign " + key)
    $SyncHeroFooter(campaign)
    @history : dim()

    @idx : 0
    @minIdx : -1
    @dir : $eNext.Forwards
    @waitingForFirstSlide : false

    @header : $MakeCampaignHeader(campaign)
    defer header.$Dom.Style.AddClasses("fadeOut")

    @load : $Storage.LoadGameState(key)
    if load != null & load.?checkpoint != null
        await $Resume()
        for idx : 0 to campaign.slides.$Obj.Count()
            if campaign.slides[idx,"checkpoint"] = load.checkpoint
                break
        idx : idx + 1
        if idx >= campaign.slides.$Obj.Count()
            $IO.Log("FAILED TO FIND CHECKPOINT!")
        minIdx : idx
        waitingForFirstSlide : true
        history[0] : free load

    while true
        @state, @checkState : $BuildStateFromDeltas(history, idx)
        $Storage.SaveGame(campaign, key, checkState)

        $SyncHeroFooter(campaign, state)
        @showBack : idx > minIdx & !waitingForFirstSlide
        dir, @delta, @didShow : await $RunSlide(campaign, state, idx, dir, history, showBack)
        if waitingForFirstSlide & didShow
            $IO.Log("min idx set " + idx)
            minIdx : idx
            waitingForFirstSlide : false

        if dir = $eNext.Forwards
            if delta.$Obj.HasChildren()
                $log("Write delta:")
                $logDeep(delta)
            history[idx] : free delta

        if dir = $eNext.Menu
            $IO.Log("Quit to menu")
            break
        if dir = $eNext.Done 
            $IO.Log("Done!")
            break

        idx : $GetNextIdx(idx, dir)
        if idx >= campaign.slides.$Obj.Count()
            $IO.Log("Reached end!")
            break
        if idx < 0
            $IO.Log("Hit begining")
            break
    $SyncHeroFooter(campaign)
    if idx < 0 // cancelling out of a campaign entirely
        $Storage.Remove(key)
        arun $Menu.Run($Menu.DoNewGame)
    else
        arun $Menu.Run($Menu.DoMain)

::Resume(=> async)
    using Dom
    @container : $g.Stage.$AppendChild(dim $Div.Create())
        mixin $Style.AddClasses("spinContainer")
        mixin $AppendChild(dim $Div.Create())
            mixin $Style.AddClasses("spin")
        mixin $AppendChild(dim $Paragraph.Create("Resuming"))
    
    await $Job.Pause(800)
    $g.Stage.$Style.AddClasses("stageOut")
    await $Job.Pause(400)
    $g.Stage.$Dom.ClearChildren()
    $g.Stage.$Style.RemoveClasses("stageOut")

::MakeCampaignHeader(campaign => element)
    using Campaign
    using Dom
    $g.CampaignHeader.$ClearChildren()
    element : $g.CampaignHeader.$AppendChild(dim $Div.Create())
        mixin $AppendChild(campaign.$Campaign.MakeHeader())
        mixin $AppendChild(dim $Div.Create())
            mixin $Style.AddClasses("vh", "borderHelp")

        mixin $AppendChild(dim $Div.Create())
            mixin $SetText(campaign.$GetName())
            mixin $Style.AddClasses("vt")

::BuildStateFromDeltas(history, idx => state, checkState)
    state : dim()
    checkState : dim()
    @temp : dim()
    for 0 to idx
        if history[it] != null
            state.$Util.MergeIn(copy history[it])
            temp.$Util.MergeIn(copy history[it])
            if history[it] has checkpoint
                checkState.$Util.MergeIn(free temp)
                temp : dim()

::GetNextIdx(idx, dir => idx)
    => switch(dir)
        $eNext.Backwards : idx - 1
        $eNext.Forwards : idx + 1
        else : idx


::RunSlide(campaign, state, idx, dir, history, canBackUp => async next, delta, didShow)

    @slide : campaign.slides[idx]
    delta : dim()
    next : dir
    didShow : false
    @ct : $Canceler.Create()

    @stage : dim
        state : state
        delta : delta
        ct : ct
        campaign : campaign
        ghost : history[idx]
        dir : dir
        overrideDir : null
    
    if slide has ifShow
        if !$(slide.ifShow, stage, state)
            $IO.Log("[Skipping slide " + ~idx + "]")
            quit // continue in this direction

    if slide has checkpoint
        if slide has delta \ delta.$Util.MergeIn(copy slide.delta)
        delta["checkpoint"] : slide.checkpoint
        $IO.Log("Checkpoint: " + slide.checkpoint)

    if slide.?func != null
        $IO.Log("Run slide: " + ~idx)

        $g.Stage.$Dom.Style.AddClasses("stageIn")
        $g.Stage.$Dom.Style.SetClassIf("backwards", dir = $eNext.Backwards)

        @interactions : dim
            $eNext.Menu : `await $MenuButton(ct)`
            $eNext.Forwards : `await $(slide.func, stage)`
        if canBackUp
            interactions[$eNext.Backwards] : `await $BackButton(ct)`
            
        next : await $Util.WaitGetFirst(ct, free interactions)
        if stage.overrideDir != null
            next : stage.overrideDir
        didShow : true
        
        $g.Stage.$Dom.Style.RemoveClasses("stageIn")
        $g.Stage.$Dom.Style.AddClasses("stageOut")
        $g.Stage.$Dom.Style.SetClassIf("backwards", next = $eNext.Backwards)
        await $Job.Pause(75) // pause is waiting for an animation frame already
        $g.Stage.$Dom.ClearChildren()
        $g.StageUI.$Dom.ClearChildren()
        $g.Stage.$Dom.Style.RemoveClasses("stageOut")
    ct.$Canceler.Cancel()


::MenuButton(ct => async)
    @pipe : $Pipe.Create()
    ct.$Canceler.PipeClean(pipe)
    
    using Dom
    @bt : $g.StageUI.$AppendChild(dim $Button.Create())
        mixin $Style.AddClasses("btMenu")
        mixin $Button.HookClick(lambda)
            pipe.$Pipe.Kill()
        mixin $SetText("Menu")
        //mixin $AppendChild(dim $Image.Create("assets/menu.png"))

    $g.HookKeyDown(ct, lambda(event))
        if event.key = "Escape"
            pipe.$Pipe.Kill()

    await pipe.$Pipe.ReadAsync()

::BackButton(ct => async)
    @pipe : $Pipe.Create()
    ct.$Canceler.PipeClean(pipe)
    
    using Dom
    @bt : $g.StageUI.$AppendChild(dim $Button.Create())
        mixin $Style.AddClasses("btBack")
        mixin $Button.HookClick(lambda)
            pipe.$Pipe.Kill()
        mixin $AppendChild(dim $Image.Create("assets/back.png"))

    $g.HookKeyDown(ct, lambda(event))
        if event.key = "ArrowLeft" | event.key = "Backspace"
            pipe.$Pipe.Kill()

    await pipe.$Pipe.ReadAsync()

scratch RenderedHeroes : dim()
//  ^RenderedHeroes[idx] : dim
//      hero : player.hero
//      elem : actual element
//      tooltip : tooltip container element

::SyncHeroFooter(camp, ?state)
    state ?: dim()
    for @idx : 1 to 5
        $UpdateHeroFooterBadge(state, idx, camp)

    $g.HeroFooter.$Dom.HideShow(state["player"].$Obj.HasChildren())

::UpdateHeroFooterBadge(state, idx, camp)
    using Dom
    @hostElem : $GetElement("hero_" + idx)
    @prevObj : ^RenderedHeroes[idx]
    @player : state["player", idx]
    
    if prevObj != null
        if player = null | prevObj.hero != player.hero
            hostElem.$ClearChildren()
            free ^RenderedHeroes[idx]

    if player != null
        if prevObj = null | prevObj.hero != player.hero
            @hero : $Heroes.LookupByName(player.hero)
            @elem : hostElem.$AppendChild(dim hero.$Heroes.MakeHeroBadge())
                mixin $Style.AddClasses("tooltipped")
            @tooltip : elem.$AppendChild(dim $Div.Create())
                mixin $Style.AddClasses("tooltip")
            (^RenderedHeroes[idx], prevObj) : dim
                hero : player.hero
                elem : elem
                tooltip : tooltip
        @tooltip : ^RenderedHeroes[idx].tooltip
        tooltip.$ClearChildren()
        tooltip.$AppendChild(dim $Paragraph.Create(player.name ? ""))
            mixin $Style.AddClasses("heroName")
        if camp has tooltipGen
            @text : $(camp.tooltipGen, state, player)
            if text != null
                tooltip.$AppendChild(dim $Div.Create())
                    mixin $SetHtml($g.HTMLify(text))
        
