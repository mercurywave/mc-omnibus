using Dom

library Slide
    ::DoCampaignMode(stage => async)
        using Fork
        await $DoFork(stage, $Campaign.ExpertMode, "Campaign Mode", "Select the Campaign Mode", dim)
            $MakeOption("Standard Campaign", false)
            $MakeOption("Expert Campaign", true, "For players who want a more challenging campaign experience")

    library Fork
        ::MakeOption(text, value, ?subtext, ?condition => opt)
            => dim
                text : text
                value : value
                subtext : subtext ? ""
                condition : free? condition

        ::DoFork(stage, key, title, text, options => async)
            @preSelect : stage.ghost[key]
            await $DoForkThen(stage, lambda, title, text, options, preSelect)
                stage.delta[key] : pick
        
        ::DoForkThen(stage, doThen, title, text, options, preSelect => async)
            // use $MakeOption to build array of options
            // if preselect != null, it will enable quick-advance
            @pipe : stage.ct.$Canceler.MakePipe()

            @pop : dim $Popup.Create(title)
                mixin $Popup.AddMarkdown(text)
            
            for @opt : options
                if opt.condition = null | $(opt.condition, stage)
                    pop.$AppendChild(dim $Button.Create())
                        mixin $Style.AddClasses("pickList")
                        mixin $AppendChild(dim $Paragraph.Create(opt.text))
                            mixin $Style.AddClasses("mainText")
                        mixin $AppendChild(dim $Paragraph.Create(opt.subtext))
                            mixin $Style.AddClasses("subText")
                        
                        mixin $Button.HookClick(lambda)
                            trap pipe.$Pipe.Write(opt.value)
            
            // looking this up in the loop to make sure the option is still valid
            if preSelect != null
                $Slide.HookAdvance(stage, lambda)
                    trap pipe.$Pipe.Write(preSelect)

            @pick : await pipe.$Pipe.ReadAsync()
            if pick != null
                $(doThen, pick)

        ::DoConfirmDefeat(stage => async)
            @pipe : stage.ct.$Canceler.MakePipe()

            @pop : dim $Popup.Create("DEFEAT")
                mixin $Popup.AddMarkdown("A loss on this scenario means a loss for the whole campaign. Are you sure?")
            
            @options : dim
                $MakeOption("The heroes were defeated", true, "You will not be able to continue")
                $MakeOption("Nevermind", false, "Take me back")

            for @opt : options
                pop.$AppendChild(dim $Button.Create())
                    mixin $Style.AddClasses("pickList")
                    mixin $AppendChild(dim $Paragraph.Create(opt.text))
                        mixin $Style.AddClasses("mainText")
                    mixin $AppendChild(dim $Paragraph.Create(opt.subtext))
                        mixin $Style.AddClasses("subText")
                    
                    mixin $Button.HookClick(lambda)
                        trap pipe.$Pipe.Write(opt.value)

            @pick : await pipe.$Pipe.ReadAsync()
            if pick != null
                if pick
                    stage.delta[$Campaign.Complete] : true
                else
                    stage.overrideDir : $eNext.Backwards
