
using Slide
using Campaign


data : dim $Campaign.Create("Sinister Motives", $Img.SinisterMotives)
    mixin $Campaign.mixOfficalCampaign(4)
    mixin $mixTooltipGen(`$SinMo.TooltipGen(state, player)`)
    
    mixin $mixProductInfo(dim)
        "Sinister Motives expansion"

    mixin $mixSaveGameReminder()

    mixin $mixHeroSelection()

    mixin $mixSlides(dim)
        $Slide.Popup("Note", textdata)
            You may not include the following cards in your player decks 
            unless a campaign rule states otherwise:
            * Venom (Eddie Brock)
            * Symbiote Suit

    mixin $mixModeSelect()
    
    mixin $mixSlides(dim)
        $IfExpert($Slide.Popup("Expert Campaign", textdata))
            **Optionally** as an additional challenge, you may choose to restrict 
            your deckbuilding for the expert campaign.
            
            After building your deck for the expert campaign, you cannot add, remove, or 
            change the aspect and/or basic cards in you deck for the remainder of the campaign.
            However, campaign-specific cards can be added to you deck as per the campaign rules.

            This app does not currently track your deck for this option,
            so you will have to do so using an external tool.

    //////////// MISSION 1 ////////////
    mixin $mixMission("S0", 1, "City in Chaos", $Img.Sandman, dim
            _ , $g.BackStyle.Black, $g.LineStyle.Yellow, $g.ForeStyle.Orange
            _ , "Read page 7-8 from the Sinister Motives rule book")
        
        $CheckList("Setup", dim, null, $Img.Sandman)
            $EnemyStageCheck("Sandman")
            $CheckList.MakeCheck("**Main Scheme Deck**: Hapless Pedestrians")

        $CheckList("Setup", dim, "**Encounter Deck**", $Img.SandClone)
            $CheckList.MakeCheck("Sandman set")
            $CheckList.MakeCheck("City in Chaos")
            $CheckList.MakeCheck("Down to Earth")
            $CheckList.MakeCheck("Standard set")
            $ExpertEncounterSetCheck()

        $SinMo.PublicOutcry()
        
        $SinMo.CommunityService(1)

        $IfExpert($CheckList("Expert Setup", dim, "", $Img.CityStreets))
            $CheckList.MakeCheck("Place 2 additional sand counters on the City Streets environment")
            $CheckList.MakeCheck("Resolve the \"Surging Sands\" ability of the City Streets environment")

        $PlayGame()

        $IfExpert($RecordHP())
        $SinMo.CommunityServiceComplete()
    
    mixin $SinMo.Reputation.mixMissionEnd(1)

    //////////// MISSION 2 ////////////
    mixin $mixMission("S1", 2, "Leave Us Alone!", $Img.Venom, dim
            _ , $g.BackStyle.Black, $g.LineStyle.Black, $g.ForeStyle.White
            _ , "Read page 10 from the Sinister Motives rule book")
        
        $CheckList("Setup", dim, null, $Img.Venom)
            $EnemyStageCheck("Venom")
            $CheckList.MakeCheck("**Main Scheme Deck**: \"Leave Us Alone!\"")

        $CheckList("Setup", dim, "**Encounter Deck**", $Img.BellTower)
            $CheckList.MakeCheck("Venom set")
            $CheckList.MakeCheck("Down to Earth")
            $CheckList.MakeCheck("Symbiotic Strength")
            $CheckList.MakeCheck("Standard set")
            $ExpertEncounterSetCheck()

        $SinMo.PublicOutcry()
        
        $SinMo.CommunityService(2)
        
    mixin $SinMo.Reputation.mixEncounterSetup(2)

    mixin $mixSlides(dim)

        $IfExpert($Setup("Place 1 facedown boost card on each identity"))

        $SinMo.HealSlide(1)
        $IfExpert($SetInitialHP())

    mixin $SinMo.Reputation.mixMissionSetup(2)

    mixin $Campaign.mixSlides(dim)
        $PlayGame()

        $IfExpert($RecordHP())
        $SinMo.CommunityServiceComplete()

    mixin $SinMo.Reputation.mixMissionEnd(2)

    //////////// MISSION 3 ////////////
    mixin $mixMission("S2", 3, "Maze of Mirrors", $Img.Mysterio, dim
            _ , $g.BackStyle.Green, $g.LineStyle.Purple, $g.ForeStyle.Yellow
            _ , "Read page 12 from the Sinister Motives rule book")

        $CheckList("Setup", dim, null, $Img.Mysterio)
            $EnemyStageCheck("Mysterio")
            $CheckList.MakeCheck("**Main Scheme Deck**: Maze of Mirrors, Edge of Reality")

        $CheckList("Setup", dim, "**Encounter Deck**", $Img.ShiftingApparition)
            $CheckList.MakeCheck("Mysterio set")
            $CheckList.MakeCheck("Personal Nightmare set")
            $CheckList.MakeCheck("Whispers of Paranoia set")
            $CheckList.MakeCheck("Standard set")
            $ExpertEncounterSetCheck()

        $SinMo.PublicOutcry()

        $SinMo.CommunityService(3)
    
    mixin $SinMo.Reputation.mixEncounterSetup(3)

    mixin $mixSlides(dim)
        
        $Setup("Put the Venom ally card into play under the first player's control")

        $IfExpert($Setup(textdata))
            Each player shuffles the top two cards of the encounter deck into their deck

        $SinMo.HealSlide(2)
        $IfExpert($SetInitialHP())

    mixin $SinMo.Reputation.mixMissionSetup(3)

    mixin $Campaign.mixSlides(dim)
        $PlayGame()

        $IfExpert($RecordHP())
        $SinMo.CommunityServiceComplete()

        $Slide.Create(lambda(stage => async))
            await $SinMo.DoCountIllusions(stage)

    mixin $SinMo.Reputation.mixMissionEnd(3)

    //////////// MISSION 4 ////////////
    mixin $mixMission("S3", 4, "The Sinister Six", $Img.DocOc, dim
            _ , $g.BackStyle.Purple, $g.LineStyle.Yellow, $g.ForeStyle.Yellow
            _ , "Read page 14 from the Sinister Motives rule book")

        $CheckList("Setup", dim, null, $Img.DocOc)
            $CheckList.MakeCheck($GTW(textdata))
                **Villians**: Doctor Octopus (I), Electro (I), Hobgoblin (I), 
                Kraven the Hunter (I), Scorpion (I), Vulture (I)
            $CheckList.MakeCheck("**Main Scheme Deck**: Sinister Synchronization, Sinister Beatdown")

        $CheckList("Setup", dim, "**Encounter Deck**", $Img.LifeSizeDecoy)
            $CheckList.MakeCheck("The Sinister Six set")
            $CheckList.MakeCheck("Guerilla Tactics set")
            $CheckList.MakeCheck("Standard set")
            $ExpertEncounterSetCheck()

        $SinMo.PublicOutcry()

        $SinMo.CommunityService(4)
    mixin $SinMo.Reputation.mixEncounterSetup(4)

    mixin $mixSlides(dim)

        $Slide.Create(lambda(stage => async))
            @text : $GTW(textdata).$Str.Interp(stage.state[$SinMo.Const.WakingNightmare])
                Place {0} threat on the Light at the End side scheme
            await $DoSimplePopup(stage, "Setup", text)
        
        $Setup("Put the Venom ally card into play under the first player's control")

        $SinMo.HealSlide(2)
        $IfExpert($SetInitialHP())

    mixin $SinMo.Reputation.mixMissionSetup(4)

    mixin $Campaign.mixSlides(dim)
        $Setup("Review page 15 for details about the active counter and villian setup and activation order")
        $PlayGame()

        $IfExpert($RecordHP())
        $SinMo.CommunityServiceComplete()

        $Slide.Create(lambda(stage => async))
            using SinMo.Const
            @opts : dim()
            @sins : $GTA(textdata)
                Doctor Octopus
                Electro
                Hobgoblin
                Kraven the Hunter
                Scorpion
                Vulture
            for sins
                opts.$List.Add($CheckList.MakeCheck(it, null, lambda, stage.ghost[$LastOnesStanding, it] ? false))
                    stage.delta[$LastOnesStanding, it] : true
            await $CheckList.DoChecklist(stage, "Last Ones Standing"
                _, "Which villians are in play?", opts, null, true)

    mixin $SinMo.Reputation.mixMissionEnd(4)

    //////////// MISSION 5 ////////////
    mixin $Campaign.mixSlides(dim($PlayGame())) // REMOVE

library SinMo
    library Const
        $ComServ : "community service"
        $LastComServ : "current community service"
        $Rep : "reputation"
        $Mission : "mission"
        $Victory : "victory points"
        $NoMinions : "no minions"
        $NoSideSchemes : "no side schemes"
        $NoMainThreat : "no threat"
        $NoAccel : "no acceleration"
        $NoDefeated : "no defeats"
        $ShieldTech : "shield tech"
        $OsbornTech : "osborn tech"
        $AspectAdvantage : "aspect advantage"
        $PlanningAhead : "planning ahead"
        $WakingNightmare : "waking nightmare"
        $LastOnesStanding : "last ones standing"

    ::TooltipGen(state, player => tooltip)
        tooltip : ""
        @rep : $Reputation.CalcCurr(state)
        if rep > 0
            tooltip : "Reputation: " + rep + "\n\n"
        @addCard : dim()
        for @key of dim($Const.ShieldTech, $Const.AspectAdvantage)
            if player[key] != null
                addCard.$List.Add(player[key])
        tooltip +: $Heroes.TooltipAddCardsHelper(addCard, null)

    ::PublicOutcry(=> slide)
        return $Slide.CheckList("Bad Publicity", dim, "From the Bad Publicity campaign set:", $Img.PublicOutcry)
            $CheckList.MakeCheck($GT(textdata), `!stage.state.$Campaign.State.IsExpert()`)
                Put the Public Outcry environment into play <br>
                <i>(Use the side with the text "Standard Mode Only")</i>
            $CheckList.MakeCheck($GT(textdata), `stage.state.$Campaign.State.IsExpert()`)
                Put the Public Outcry environment into play <br>
                <i>(Use the side with the text "Expert Mode Only")</i>
            $CheckList.MakeCheck("Shuffle the Smear Campaign treachery card into the encounter deck")

    ::CommunityService(mission => slide)
        @text1 : "Choose a \"Campaign - Community Service\" side scheme at random"
        @text2 : "Shuffle that side scheme card into the encounter deck"
        return $GetAnotherComServ(mission, "Community Service", text1, text2, $GTA(textdata))
            Back Alley Burglary
            Cat in a Tree
            Henchmen Heist
            Off the Rails
            Rubble Rescue

    ::GetAnotherComServ(mission, title, text1, text2, &possibleCards => slide)
        return $Slide.Create(lambda(stage => async)[mission, title, text1, text2, free possibleCards])
            
            @unpicked : possibleCards.$List.Filter(`!stage.state[$Const.ComServ, it] ? false`)
            @initial : stage.ghost[$Const.LastComServ] ? unpicked.$List.QuickPick()

            @pick : await $DoGetAnotherNewFromPile(stage, title, text1, text2, unpicked, initial)

            stage.delta[$Const.LastComServ] : pick ? ""


    ::DoGetAnotherNewFromPile(stage, title, text1, text2, possibleCards, initial => async selection)
        using Dom
        @pipe : stage.ct.$Canceler.MakePipe()
        
        @drop
        @pop : dim $Popup.Create(title)
            mixin $Style.AddClasses("getFromPile")
            mixin $Popup.AddMarkdown(text1)
            mixin $AppendChild(dim $Dropdown.Create() >> drop)
                mixin $Dropdown.AddListOfOptions(possibleCards)
                mixin $Dropdown.SetValue(initial)
            mixin $Popup.AddMarkdown(text2)

        pop.$Popup.AddBotRightButton(lambda)
            pipe.$Pipe.Kill()

        $Slide.HookAdvance(stage, lambda)
            pipe.$Pipe.Kill()

        await pipe.$Pipe.ReadAsync()

        if stage.ct.$Canceler.IsLive()
            selection : drop.$Dropdown.GetValue()

    ::CommunityServiceComplete(=> slide)
        => $Slide.Create(lambda(stage => async))
            using Fork
            @service : stage.state[$Const.LastComServ]
            @text : "Is the " + service + " side scheme in the victory display?"
            @opts : dim
                $MakeOption(service + " in victory display", true)
                $MakeOption("Not in victory display", false)
            @preSelect : stage.ghost[$Const.ComServ, service] ? false
            await $DoForkThen(stage, lambda(pick), "Victory", text, opts, preSelect)
                if pick
                    stage.delta[$Const.ComServ, service] : true

    
    ::HealSlide(numCards => slide)
        => $RedSkull.IfCanHeal($Slide.Create(lambda(stage => async)))
            await $DoHeal(stage, numCards)

    ::DoHeal(stage, numCards => async)
        using Dom
        @pipe : stage.ct.$Canceler.MakePipe()
        
        @container
        @pop : dim $Popup.Create("Persistent Damage")
            mixin $AppendChild(dim $Paragraph.Create())
                mixin $SetHtml($g.HTMLify($GTW(textdata).$Str.Interp(numCards), stage))
                    Each player may heal to full health by dealing themselves
                    {0} facedown encounter card.

            mixin $AppendChild(dim $Div.Create() >> container)
                mixin $Style.AddClasses("healing")

        @checks : dim()

        for @idx in stage.state.player
            @hp : stage.state.$Campaign.State.GetHp(idx)
            @hero : stage.state.$Campaign.State.GetHero(idx)
            @alive : hp > 0
            @ghost : (stage.ghost["player", idx, "hp"] != null)
            @id : "chkOpt" + ~idx

            @rightPane; @lbl; @paneAdd
            @playerCard : container.$AppendChild(dim $Div.Create())
                mixin $Style.AddClasses("player")
                mixin $Style.SetClassIf("dead", !alive)
                mixin $AppendChild(hero.$Heroes.MakeHeroBadge())
                mixin $AppendChild(dim $Div.Create())
                    mixin $AppendChild(dim $Paragraph.Create("HP"))
                        mixin $Style.AddClasses("hpLbl")
                    mixin $AppendChild(dim $Paragraph.Create("" + hp + "/" + hero.$Heroes.GetHp()))
                        mixin $Style.AddClasses("hp")

                mixin $AppendChild(dim $Div.Create() >> rightPane)
                    mixin $Style.AddClasses("rPane")
                    mixin $AppendChild(dim $Checkbox.CreateLabelFor(id) >> lbl)
                        mixin $Style.SetClassIf("noDisp", hp >= hero.$Heroes.GetHp() | !alive)
                    mixin $AppendChild(dim $Div.Create() >> paneAdd)
                        mixin $Style.SetClassIf("noDisp", alive & !ghost)
            
            (@chk, checks[idx]) : lbl.$AppendChild(dim $Checkbox.Create())
                mixin $SetId(id)
                mixin $Checkbox.SetIsChecked(!alive | ghost)
            chk.$Checkbox.HookChange(lambda)
                paneAdd.$Style.SetClassIf("noDisp", !chk.$Checkbox.IsChecked())
            lbl.$AppendChild(dim $Paragraph.Create("Heal to full health"))
            
            // I18N: this would need to be re-worked
            paneAdd.$AppendChild(dim $Paragraph.Create("Deal yourself " + numCards 
                    _ + " facedown encounter card" + $iif(numCards > 1, "s", "")))
                mixin $Style.AddClasses("obligation")
        
        pop.$Popup.AddBotRightButton(lambda)
            pipe.$Pipe.Kill()

        $Slide.HookAdvance(stage, lambda)
            pipe.$Pipe.Kill()

        await pipe.$Pipe.ReadAsync()

        for @chk of checks at @idx
            if chk.$Checkbox.IsChecked()
                @hero : stage.state.$Campaign.State.GetHero(idx)
                stage.delta["player", idx, "hp"] : hero.$Heroes.GetHp()

    ::DoCountIllusions(stage => async)
        @text : $GTW(textdata)
            What is the total number of *ILLUSION* cards in all player decks?
        await $RedSkull.DoRecordNumber(stage, $Const.WakingNightmare, "Waking Nightmare", text, 0)

    library Reputation
        ::.mixMissionEnd(mission)
            this.$Campaign.mixSlides(dim)
                $MakeCalculateSlide(mission)
                $IfPassing(1, $DistributeShieldTech())
                $IfPassing(1, $OsTech())
                $IfPassing(9, $AspectAdvantage())
                //$IfPassing(13, $UpgradeShieldTech()) // this is done during setup instead
                $IfPassing(13, $OsTech())
                $IfPassing(17, $PlanningAhead())
                $IfPassing(21, $OsTech())

        ::.mixEncounterSetup(mission)
            this.$Campaign.mixSlides(dim)
                $IfPassing(1, $OsTechSetup())
                $IfGreater(9, $EncounterChecklist())
                $IfGreater(5, $PerPlayerThreat(1))

        ::.mixMissionSetup(mission)
            this.$Campaign.mixSlides(dim)
                $IfGreater(13, $BonusChecklist())
                $IfGreater(5, $SimpleSetup("Each player may take 1 additional mulligan"))
                $IfGreater(17, $GetPlannedCard())

        ::IfPassing(value, &subSlide => slide)
            => $Slide.If(`$IsPassing(state, value)`, free subSlide)
            
        ::IfGreater(value, &subSlide => slide)
            => $Slide.If(`$IsGreater(state, value)`, free subSlide)
        
        ::IsPassing(state, value => bool)
            using Const
            @lastMission : state[$Mission].$Obj.PrevKey()
            @score : $CalcCurr(state)
            if score >= value
                @delta : $CalcForMission(state, lastMission)
                if score - delta < value
                    return true
            return false
        
        ::IsGreater(state, value => bool)
            => $CalcCurr(state) >= value

        ::CalcCurr(state => val)
            val : 0
            using Const
            for @miss in state[$Mission] ? dim()
                val +: $CalcForMission(state, miss)

        ::CalcForMission(state, mission => val)
            using Const
            val : state[$Mission, mission, $Const.Victory] ? 0
            for @key of dim($NoMinions, $NoSideSchemes, $NoMainThreat, $NoAccel, $NoDefeated)
                if state[$Mission, mission, key] ? false
                    val +: 1

        ::MakeCalculateSlide(mission => slide)
            => $Slide.Create(lambda(stage => async))
                    await $DoCalculateSlide(stage, mission)

        ::DoCalculateSlide(stage, mission => async)
            using Dom
            @pipe : stage.ct.$Canceler.MakePipe()

            @ghost : stage.ghost[$Const.Mission, mission] ? dim()
            @commServiceVal : switch
                stage.state[$Const.ComServ, stage.state[$Const.LastComServ]] ? false : 1
                else : 0
            @initVic : ghost[$Const.Victory] ? commServiceVal
            @isExpert : stage.state.$State.IsExpert()

            @vicCtl; @pane
            
            @pop : dim $Popup.Create("Conditions")
                mixin $Style.AddClasses("conditions")
                mixin $AppendChild(dim $Div.Create())
                    mixin $Style.AddClasses("scroller")
                    mixin $Popup.AddMarkdown($GTW(textdata))
                        Enter Victory points and mark each condition met at the end of
                        the game to calculate your reputation score for the mission
                    
                    //mixin $AppendChild(dim $Div.Create())
                        //mixin $Style.AddClasses("numPane")
                    mixin $AppendChild(dim $Input.CreateLabelFor("txtVic"))
                        mixin $AppendChild(dim $NumberEntry.Create() >> vicCtl)
                            mixin $Style.AddClasses("numberEntry")
                            mixin $NumberEntry.SetText(initVic)
                            mixin $NumberEntry.DoSelectAllOnFocus()
                            mixin $SetId("txtVic")
                        mixin $AppendChild($Paragraph.Create("Victory points in the victory display"))

                    mixin $AppendChild(dim $Div.Create() >> pane)

                mixin $Popup.AddBotRightButton(`pipe.$Pipe.Kill()`)
            $Slide.HookAdvance(stage, `pipe.$Pipe.Kill()`)
            
            @chkMinions : pane.$mixAddCheckBox("No minions in play (+1)", ghost[$Const.NoMinions] ? false)
            @chkSide : pane.$mixAddCheckBox("No side schemes in play (+1)", ghost[$Const.NoSideSchemes] ? false)
            @chkMain : pane.$mixAddCheckBox("No threat on the main scheme (+1)", ghost[$Const.NoMainThreat] ? false)
            @chkAccel : pane.$mixAddCheckBox(
                _ "Fewer than " + stage.state.players + " acceleration tokens in play (+1)"
                _ , ghost[$Const.NoAccel] ? false)
            @anyDefeat : switch
                isExpert : stage.state.$State.AnyPlayerDefeated()
                else : ghost[$Const.NoDefeated] ? false
            @chkDefeat : pane.$mixAddCheckBox("No defeated players (+1)", !anyDefeat, isExpert)

            await pipe.$Pipe.ReadAsync()
            if stage.ct.$Canceler.IsLive()
                using Const
                (stage.delta[$Mission, mission], @node) : dim()
                node[$Const.Victory] : vicCtl.$NumberEntry.GetText()
                node[$Const.NoMinions] : chkMinions.$Checkbox.IsChecked()
                node[$Const.NoSideSchemes] : chkSide.$Checkbox.IsChecked()
                node[$Const.NoMainThreat] : chkMain.$Checkbox.IsChecked()
                node[$Const.NoAccel] : chkAccel.$Checkbox.IsChecked()
                node[$Const.NoDefeated] : chkDefeat.$Checkbox.IsChecked() 

        ::SimpleSetup(text, ?hint => slide)
            text : $GT(text)
            slide : $Slide.Create(lambda(stage => async))
                await $DoSimplePopup(stage, "Reputation", text)
        
        ::DistributeShieldTech(=> slide)
            => $Slide.Create(lambda(stage => async))
                @text : $GTW(textdata)
                    Deal 3 "Campaign - S.H.I.E.L.D. Tech" upgrades at random to each 
                    player. Each player may choose 1 to add to their deck for the 
                    rest of the campaign.<br/>
                    <em>(These do not count toward minimum/maximum deck size)</em>
                await $RedSkull.DoDistributeVictory(stage, $Const.ShieldTech, text, $GTA(textdata), "Reputation")
                    Compact Darts
                    Impact-Dampening Suit
                    Laser Googles
                    Propulsion Gauntlet
                    Retinal Display
                    Shock Knuckles
                    Wave Bracers
                    Wrist Navigators

        ::UpgradeShieldTech(=> slide)
            => $Slide.Create(lambda(stage => async))
                @text : $GTW(textdata)
                    Each player flips their "Campaign - S.H.I.E.L.D. Tech" upgrade
                    to it's upgraded side.
                await $DoUpgradeShieldTech(stage, $Const.ShieldTech, text, "Reputation")
        
        ::DoUpgradeShieldTech(stage, key, text, ?title => async)
            using Dom
            // this shares styles with $RedSkull.DoDistributeVictory
            title ?: "Victory"
            @pipe : stage.ct.$Canceler.MakePipe()
            
            @container
            @pop : dim $Popup.Create(title)
                mixin $Popup.AddMarkdown(text)
                mixin $AppendChild(dim $Div.Create() >> container)
                    mixin $Style.AddClasses("playerCardAssign", "instruction")

            for @idx in stage.state.player
                @hero : stage.state.$Campaign.State.GetHero(idx)
                @alive : !stage.state.$Campaign.State.IsExpert() | stage.state.$Campaign.State.GetHp(idx) > 0

                @rightPane
                @playerCard : container.$AppendChild(dim $Div.Create())
                    mixin $Style.AddClasses("player")
                    mixin $AppendChild(hero.$Heroes.MakeHeroBadge())
                    mixin $Style.SetClassIf("dead", !alive)
                    mixin $AppendChild(dim $Div.Create() >> rightPane)
                        mixin $Style.AddClasses("pickers")

                @card : stage.state["player", idx, key]
                if !alive
                    rightPane.$AppendChild(dim $Paragraph.Create("Recovering (not participating)"))
                else
                    if card = null
                        rightPane.$AppendChild(dim $Paragraph.Create("(No card to upgrade)"))
                    else
                        rightPane.$AppendChild(dim $Paragraph.Create("Upgrade " + card))
                        stage.delta["player", idx, key] : card + " (Upgraded)"
            
            pop.$Popup.AddBotRightButton(lambda)
                pipe.$Pipe.Kill()

            $Slide.HookAdvance(stage, lambda)
                pipe.$Pipe.Kill()

            await pipe.$Pipe.ReadAsync()
                

        ::LogAnotherFromPile(key, title, text1, text2, &possibleCards => slide)
            return $Slide.Create(lambda(stage => async)[key, title, text1, text2, free possibleCards])
                
                @unpicked : possibleCards.$List.Filter(`!stage.state[key, it] ? false`)
                @initial : stage.ghost[key]?.$Obj.NextKey() ? unpicked.$List.QuickPick()

                @pick : await $DoGetAnotherNewFromPile(stage, title, text1, text2, unpicked, initial)

                if pick != null & pick != ""
                    stage.delta[key, pick] : true

        ::OsTech( => slide)
            @text1 : "Choose one \"Osborn Tech\" attachment at random"
            return $LogAnotherFromPile($Const.OsbornTech, "Reputation", text1, "",  $GTA(textdata))
                Arm Cannon
                Ionic Boots
                Kinetic Armor
                Neocarbon Scales
                Spiked Gauntlet
                Tracking Display
        
        ::OsTechSetup(=> slide)
            => $Slide.Create(lambda(stage => async))
                @opts : dim()
                for @card in stage.state[$Const.OsbornTech]
                    opts.$List.Add($CheckList.MakeCheck(card))
                @text : "Shuffle each of the following Osborn Tech cards into the encounter deck"
                await $CheckList.DoChecklist(stage, "Reputation", text, opts, null, false)

        ::PerPlayerThreat(threat => slide)
            // kinda weird to have this on it's own, but the checklist is crowded
            => $Slide.Create(lambda(stage => async))
                @cnt : stage.state["players"]
                @text : "Place <PLAYER*1> threat on the main scheme"
                await $DoSimplePopup(stage, "Reputation", text)
        

        ::EncounterChecklist( =>slide)
            => $Slide.CheckList("Reputation", dim)
                $CheckList.MakeCheck($GTW(textdata), `$CalcCurr(stage.state) >= 9`)
                    Each player searches the encounter deck for a minion and puts that minion
                    into play engaged with themself. Each player that cannot is dealt
                    a facedown encounter card.
                $CheckList.MakeCheck($GTW(textdata), `$CalcCurr(stage.state) >= 17`)
                    The first player searches the encounter deck for a side scheme, then reveals it
                $CheckList.MakeCheck($GTW(textdata), `$CalcCurr(stage.state) >= 17`)
                    Place <PLAYER*1> threat on the revealed side scheme
                $CheckList.MakeCheck($GTW(textdata), `$CalcCurr(stage.state) >= 25`)
                    Deal 1 facedown encounter card to each player
        
        ::BonusChecklist( =>slide)
            => $Slide.CheckList("Reputation", dim)
                $CheckList.MakeCheck($GTW(textdata), `$CalcCurr(stage.state) >= 13`)
                    Each player flips their "Campaign - S.H.I.E.L.D. Tech"
                    upgrade to its Enhanced side.
                $CheckList.MakeCheck($GTW(textdata), `$CalcCurr(stage.state) >= 21`)
                    Each player may search their collection for a Helicarrier 
                    support card and put it into play under their control.
                $CheckList.MakeCheck($GTW(textdata), `$CalcCurr(stage.state) >= 25`)
                    Each player may search their collection for a Symbiote 
                    Suit upgrade card and put it into play under their control.

        ::AspectAdvantage( => slide)
            => $Slide.Create(lambda(stage => async))
                @text : $GT(textdata)
                    Each player chooses any aspect card from their collection and adds the
                    max copies of that card to their deck.

                    <em>(These cards do not count towards min/max deck size)</em>
                await $DoLogAspectCard(stage, $Const.AspectAdvantage, text, "Reputation")
        
        ::PlanningAhead( => slide)
            => $Slide.Create(lambda(stage => async))
                @text : $GT(textdata)
                    Each player selects and logs one card from their deck.

                    <em>(Players will be able to add one copy of this card
                    to their hand at the start of future games)</em>
                await $DoLogAspectCard(stage, $Const.PlanningAhead, text, "Reputation")

        ::DoLogAspectCard(stage, key, text, ?title => async)
            using Dom
            // this shares styles with $RedSkull.DoDistributeVictory
            title ?: "Victory"
            @pipe : stage.ct.$Canceler.MakePipe()
            
            @container
            @pop : dim $Popup.Create(title)
                mixin $Popup.AddMarkdown(text)
                mixin $AppendChild(dim $Div.Create() >> container)
                    mixin $Style.AddClasses("playerCardAssign", "freeText")

            @fields : dim() // not every hero gets a selector!

            for @idx in stage.state.player
                @hero : stage.state.$Campaign.State.GetHero(idx)
                @alive : !stage.state.$Campaign.State.IsExpert() | stage.state.$Campaign.State.GetHp(idx) > 0

                @rightPane
                @playerCard : container.$AppendChild(dim $Div.Create())
                    mixin $Style.AddClasses("player")
                    mixin $AppendChild(hero.$Heroes.MakeHeroBadge())
                    mixin $Style.SetClassIf("dead", !alive)
                    mixin $AppendChild(dim $Div.Create() >> rightPane)
                        mixin $Style.AddClasses("pickers")

                if alive
                    fields[idx] : rightPane.$AppendChild(dim $TextEntry.Create())
                        mixin $TextEntry.SetText(stage.ghost["player", idx, key] ? "")
                else
                    rightPane.$AppendChild(dim $Paragraph.Create("Recovering (not participating)"))
            
            pop.$Popup.AddBotRightButton(lambda)
                pipe.$Pipe.Kill()

            $Slide.HookAdvance(stage, lambda)
                pipe.$Pipe.Kill()

            await pipe.$Pipe.ReadAsync()

            for @pick of fields at @idx
                @val : pick.$TextEntry.GetText()
                if val != ""
                    stage.delta["player", idx, key] : val

        ::GetPlannedCard( => slide)
            => $Slide.Create(lambda(stage => async))
                @text : $GT(textdata)
                    Each player searches their deck and discard for 1 copy of their logged
                    card below and add that card to your hand.
                await $DoGetPlannedCard(stage, $Const.PlanningAhead, text, "Reputation")
        
        ::DoGetPlannedCard(stage, key, text, ?title => async)
            using Dom
            // this shares styles with $RedSkull.DoDistributeVictory
            title ?: "Reputation"
            @pipe : stage.ct.$Canceler.MakePipe()
            
            @container
            @pop : dim $Popup.Create(title)
                mixin $Popup.AddMarkdown(text)
                mixin $AppendChild(dim $Div.Create() >> container)
                    mixin $Style.AddClasses("playerCardAssign", "instruction")

            for @idx in stage.state.player
                @hero : stage.state.$Campaign.State.GetHero(idx)

                @rightPane
                @playerCard : container.$AppendChild(dim $Div.Create())
                    mixin $Style.AddClasses("player")
                    mixin $AppendChild(hero.$Heroes.MakeHeroBadge())
                    mixin $AppendChild(dim $Div.Create() >> rightPane)
                        mixin $Style.AddClasses("pickers")

                @card : stage.state["player", idx, key]
                if card = null
                    rightPane.$AppendChild(dim $Paragraph.Create("(No card logged)"))
                else
                    rightPane.$AppendChild(dim $Paragraph.Create(card))
            
            pop.$Popup.AddBotRightButton(lambda)
                pipe.$Pipe.Kill()

            $Slide.HookAdvance(stage, lambda)
                pipe.$Pipe.Kill()

            await pipe.$Pipe.ReadAsync()

scratch _uniqChkID : 0
::.mixAddCheckBox(label, ?isChecked, ?disable => chk)
    using Dom
    ^_uniqChkID +: 1
    @id : "chkUniq" + ^_uniqChkID
    this.$AppendChild(dim $Checkbox.CreateLabelFor(id))
        mixin $AppendChild(dim $Checkbox.Create() >> chk)
            mixin $SetId(id)
            mixin $Checkbox.SetIsChecked(isChecked ? false)
        mixin $Style.SetClassIf("disabled", disable ? false)
        mixin $AppendChild($Paragraph.Create(label))
    if disable
        chk.$SetAttribute("disabled", "disabled")

